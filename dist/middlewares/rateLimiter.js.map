{"version":3,"file":"rateLimiter.js","sourceRoot":"","sources":["../../src/middlewares/rateLimiter.ts"],"names":[],"mappings":";;;;;;AAAA,4EAA2C;AAC3C,mEAA2C;AAC3C,8DAA4D;AAC5D,iEAA8D;AAG9D,sDAAsD;AACzC,QAAA,aAAa,GAAG,IAAA,4BAAS,EAAC;IACrC,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAM,WAAW;IACxC,GAAG,EAAE,GAAG,EAAqB,iCAAiC;IAC9D,eAAe,EAAE,IAAI;IACrB,aAAa,EAAE,KAAK;IACpB,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACpB,gBAAM,CAAC,IAAI,CACT,2CAA2C,EAC3C,GAAG,CAAC,MAAM,EACV,GAAG,CAAC,WAAW,EACf,GAAG,CAAC,EAAE,CACP,CAAC;QACF,IAAA,0BAAY,EAAC,GAAG,EAAE,+BAAc,CAAC,iBAAiB,EAAE;YAClD,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,iEAAiE;SAC3E,CAAC,CAAC;IACL,CAAC;CACF,CAAC,CAAC;AAEH,gEAAgE;AACnD,QAAA,WAAW,GAAG,IAAA,4BAAS,EAAC;IACnC,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAK,WAAW;IACvC,GAAG,EAAE,CAAC,EAAuB,eAAe;IAC5C,eAAe,EAAE,IAAI;IACrB,aAAa,EAAE,KAAK;IACpB,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACpB,gBAAM,CAAC,IAAI,CACT,yCAAyC,EACzC,GAAG,CAAC,MAAM,EACV,GAAG,CAAC,WAAW,EACf,GAAG,CAAC,EAAE,CACP,CAAC;QACF,IAAA,0BAAY,EAAC,GAAG,EAAE,+BAAc,CAAC,iBAAiB,EAAE;YAClD,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,uEAAuE;SACjF,CAAC,CAAC;IACL,CAAC;CACF,CAAC,CAAC;AAEU,QAAA,kBAAkB,GAAG,IAAA,4BAAS,EAAC;IAC1C,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,YAAY;IACtC,wBAAwB;IACxB,GAAG,EAAE,CAAC,GAAyB,EAAE,IAAI,EAAE,EAAE;QACvC,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;QAC5B,IAAI,IAAI,KAAK,OAAO,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC,CAAE,wBAAwB;QACxC,CAAC;aAAM,IAAI,IAAI,KAAK,OAAO,EAAE,CAAC;YAC5B,OAAO,EAAE,CAAC,CAAG,yBAAyB;QACxC,CAAC;QACD,OAAO,EAAE,CAAC,CAAM,sBAAsB;IACxC,CAAC;IACD,eAAe,EAAE,IAAI;IACrB,aAAa,EAAE,KAAK;IACpB,OAAO,EAAE,CAAC,GAAyB,EAAE,GAAG,EAAE,EAAE;QAC1C,gBAAM,CAAC,IAAI,CACT,yDAAyD,EACzD,GAAG,CAAC,IAAI,EAAE,IAAI,EACd,GAAG,CAAC,MAAM,EACV,GAAG,CAAC,WAAW,EACf,GAAG,CAAC,EAAE,CACP,CAAC;QACF,IAAA,0BAAY,EAAC,GAAG,EAAE,+BAAc,CAAC,iBAAiB,EAAE;YAClD,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,8EAA8E;SACxF,CAAC,CAAC;IACL,CAAC;CACF,CAAC,CAAC","sourcesContent":["import rateLimit from 'express-rate-limit';\r\nimport logger from '../core/logger/logger';\r\nimport { sendResponse } from '../core/response/apiResponse';\r\nimport { HttpStatusCode } from '../core/enums/httpStatusCode';\r\nimport { AuthenticatedRequest } from './authMiddleware';\r\n\r\n// 5 dakika içinde en fazla 100 istek → global limiter\r\nexport const globalLimiter = rateLimit({\r\n  windowMs: 5 * 60 * 1000,     // 5 dakika\r\n  max: 100,                    // her IP için maksimum 100 istek\r\n  standardHeaders: true,\r\n  legacyHeaders: false,\r\n  handler: (req, res) => {\r\n    logger.warn(\r\n      'Rate limit aşıldı (global): %s %s from %s',\r\n      req.method,\r\n      req.originalUrl,\r\n      req.ip\r\n    );\r\n    sendResponse(res, HttpStatusCode.TOO_MANY_REQUESTS, {\r\n      success: false,\r\n      message: \"Çok fazla istek yaptınız. Lütfen bir süre sonra tekrar deneyin.\"\r\n    });\r\n  }\r\n});\r\n\r\n// 15 dakika içinde max 5 login/register denemesi → auth limiter\r\nexport const authLimiter = rateLimit({\r\n  windowMs: 5 * 60 * 1000,    // 5 dakika\r\n  max: 5,                      // max 5 deneme\r\n  standardHeaders: true,\r\n  legacyHeaders: false,\r\n  handler: (req, res) => {\r\n    logger.warn(\r\n      'Rate limit aşıldı (auth): %s %s from %s',\r\n      req.method,\r\n      req.originalUrl,\r\n      req.ip\r\n    );\r\n    sendResponse(res, HttpStatusCode.TOO_MANY_REQUESTS, {\r\n      success: false,\r\n      message: \"Çok fazla oturum açma denemesi. Lütfen 5 dakika sonra tekrar deneyin.\"\r\n    });\r\n  }\r\n});\r\n\r\nexport const reservationLimiter = rateLimit({\r\n  windowMs: 10 * 60 * 1000, // 10 dakika\r\n  // role bazlı max ayarı:\r\n  max: (req: AuthenticatedRequest, _res) => {\r\n    const role = req.user?.role;\r\n    if (role === \"ADMIN\") {\r\n      return 1000;  // admin çok yüksek kota\r\n    } else if (role === \"OWNER\") {\r\n      return 50;   // owner biraz daha fazla\r\n    }\r\n    return 10;      // normal user için 10\r\n  },\r\n  standardHeaders: true,\r\n  legacyHeaders: false,\r\n  handler: (req: AuthenticatedRequest, res) => {\r\n    logger.warn(\r\n      \"Rate limit aşıldı (reservation, role=%s): %s %s from %s\",\r\n      req.user?.role,\r\n      req.method,\r\n      req.originalUrl,\r\n      req.ip\r\n    );\r\n    sendResponse(res, HttpStatusCode.TOO_MANY_REQUESTS, {\r\n      success: false,\r\n      message: \"Çok fazla rezervasyon isteği yaptınız. Lütfen bir süre sonra tekrar deneyin.\"\r\n    });\r\n  }\r\n});\r\n\r\n\r\n"]}
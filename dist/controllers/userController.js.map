{"version":3,"file":"userController.js","sourceRoot":"","sources":["../../src/controllers/userController.ts"],"names":[],"mappings":";;;;;;AACA,iEAA8D;AAC9D,8DAA4D;AAC5D,0CAAuC;AACvC,mEAA2C,CAAG,mBAAmB;AAE1D,MAAM,UAAU,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC9D,gBAAM,CAAC,IAAI,CAAC,+BAA+B,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;IAEvD,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IAC5D,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,eAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvC,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE;SACjD,CAAC,CAAC;QAEH,gBAAM,CAAC,IAAI,CAAC,kCAAkC,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;QAC5D,IAAA,0BAAY,EAAC,GAAG,EAAE,+BAAc,CAAC,EAAE,EAAE;YACnC,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,yBAAyB;YAClC,IAAI,EAAE,OAAO;SACd,CAAC,CAAC;QACH,OAAO;IACT,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,gBAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;QAC7C,IAAA,0BAAY,EAAC,GAAG,EAAE,+BAAc,CAAC,qBAAqB,EAAE;YACtD,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,sBAAsB;SAChC,CAAC,CAAC;QACH,OAAO;IACT,CAAC;AACH,CAAC,CAAC;AAxBW,QAAA,UAAU,cAwBrB;AAEK,MAAM,WAAW,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;IAC/D,gBAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAEpC,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,MAAM,eAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAE3C,gBAAM,CAAC,IAAI,CAAC,kCAAkC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAC9D,IAAA,0BAAY,EAAC,GAAG,EAAE,+BAAc,CAAC,EAAE,EAAE;YACnC,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,KAAK;SACZ,CAAC,CAAC;QACH,OAAO;IACT,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,gBAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;QAC9C,IAAA,0BAAY,EAAC,GAAG,EAAE,+BAAc,CAAC,qBAAqB,EAAE;YACtD,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,mBAAmB;SAC7B,CAAC,CAAC;QACH,OAAO;IACT,CAAC;AACH,CAAC,CAAC;AApBW,QAAA,WAAW,eAoBtB","sourcesContent":["import { Request, Response } from \"express\";\r\nimport { HttpStatusCode } from \"../core/enums/httpStatusCode\";\r\nimport { sendResponse } from \"../core/response/apiResponse\";\r\nimport { prisma } from \"../lib/prisma\";\r\nimport logger from \"../core/logger/logger\";   // ← logger eklendi\r\n\r\nexport const createUser = async (req: Request, res: Response) => {\r\n  logger.info(\"createUser çağrıldı, body: %o\", req.body);\r\n\r\n  const { name, id, email, password, role, phone } = req.body;\r\n  try {\r\n    const newUser = await prisma.user.create({\r\n      data: { name, id, email, password, role, phone },\r\n    });\r\n\r\n    logger.info(\"createUser başarılı – userId: %s\", newUser.id);\r\n    sendResponse(res, HttpStatusCode.OK, {\r\n      success: true,\r\n      message: \"User successfully added\",\r\n      data: newUser,\r\n    });\r\n    return;\r\n  } catch (error) {\r\n    logger.error(\"createUser hatası: %o\", error);\r\n    sendResponse(res, HttpStatusCode.INTERNAL_SERVER_ERROR, {\r\n      success: false,\r\n      message: \"User cannot be added\",\r\n    });\r\n    return;\r\n  }\r\n};\r\n\r\nexport const getAllUsers = async (req: Request, res: Response) => {\r\n  logger.info(\"getAllUsers çağrıldı\");\r\n\r\n  try {\r\n    const users = await prisma.user.findMany();\r\n\r\n    logger.info(\"getAllUsers başarılı – count: %d\", users.length);\r\n    sendResponse(res, HttpStatusCode.OK, {\r\n      success: true,\r\n      data: users,\r\n    });\r\n    return;\r\n  } catch (error) {\r\n    logger.error(\"getAllUsers hatası: %o\", error);\r\n    sendResponse(res, HttpStatusCode.INTERNAL_SERVER_ERROR, {\r\n      success: false,\r\n      message: \"Cannot list users\",\r\n    });\r\n    return;\r\n  }\r\n};\r\n"]}
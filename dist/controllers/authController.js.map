{"version":3,"file":"authController.js","sourceRoot":"","sources":["../../src/controllers/authController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport bcrypt from \"bcrypt\";\r\nimport { signToken } from \"../utils/jwt\";\r\nimport { sendResponse } from \"../core/response/apiResponse\";\r\nimport { HttpStatusCode } from \"../core/enums/httpStatusCode\";\r\nimport { RegisterSchema, LoginSchema } from \"../validators/zodSchemas\";\r\nimport { prisma } from \"../lib/prisma\";\r\nimport logger from \"../core/logger/logger\";   // ← logger’ı ekledik\r\n\r\nexport const register = async (req: Request, res: Response) => {\r\n  logger.info(\"register endpoint çağrıldı, body: %o\", req.body);\r\n\r\n  const result = RegisterSchema.safeParse(req.body);\r\n  if (!result.success) {\r\n    logger.warn(\r\n      \"register: Geçersiz veri – %s\",\r\n      result.error.errors[0].message\r\n    );\r\n    sendResponse(res, HttpStatusCode.BAD_REQUEST, {\r\n      success: false,\r\n      message: \"Geçersiz kayıt verisi.\",\r\n      error: result.error.errors[0].message,\r\n    });\r\n    return;\r\n  }\r\n\r\n  const { name, email, password, } = result.data;\r\n\r\n  try {\r\n    const existingUser = await prisma.user.findUnique({ where: { email } });\r\n    if (existingUser) {\r\n      logger.warn(\"register: Çakışma – email zaten kayıtlı (%s)\", email);\r\n      sendResponse(res, HttpStatusCode.CONFLICT, {\r\n        success: false,\r\n        message: \"Email zaten kayıtlı.\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 8);\r\n    const user = await prisma.user.create({\r\n      data: { name, email, password: hashedPassword},\r\n    });\r\n\r\n    logger.info(\"register başarılı – userId: %s\", user.id);\r\n    sendResponse(res, HttpStatusCode.CREATED, {\r\n      message: \"Kayıt başarılı.\",\r\n      data: { userId: user.id },\r\n    });\r\n    return;\r\n  } catch (err) {\r\n    logger.error(\"register hatası: %o\", err);\r\n    sendResponse(res, HttpStatusCode.INTERNAL_SERVER_ERROR, {\r\n      success: false,\r\n      message: \"Bir hata oluştu.\",\r\n    });\r\n    return;\r\n  }\r\n};\r\n\r\nexport const login = async (req: Request, res: Response) => {\r\n  logger.info(\"login endpoint çağrıldı, body: %o\", req.body);\r\n\r\n  const result = LoginSchema.safeParse(req.body);\r\n  if (!result.success) {\r\n    logger.warn(\r\n      \"login: Geçersiz veri – %o\",\r\n      result.error.errors\r\n    );\r\n    sendResponse(res, HttpStatusCode.BAD_REQUEST, {\r\n      success: false,\r\n      message: \"Geçersiz giriş verisi.\",\r\n      error: result.error.errors,\r\n    });\r\n    return;\r\n  }\r\n\r\n  const { email, password } = result.data;\r\n\r\n  try {\r\n    const user = await prisma.user.findUnique({ where: { email } });\r\n    if (!user) {\r\n      logger.warn(\"login: Başarısız – email bulunamadı (%s)\", email);\r\n      sendResponse(res, HttpStatusCode.UNAUTHORIZED, {\r\n        success: false,\r\n        message: \"Geçersiz email veya şifre.\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      logger.warn(\"login: Başarısız – şifre uyuşmuyor (userId: %s)\", user.id);\r\n      sendResponse(res, HttpStatusCode.UNAUTHORIZED, {\r\n        success: false,\r\n        message: \"Geçersiz email veya şifre.\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const token = signToken({ id: user.id, role: user.role });\r\n    const { password: _, ...userWithoutPassword } = user;\r\n\r\n    logger.info(\"login başarılı – userId: %s\", user.id);\r\n    sendResponse(res, HttpStatusCode.OK, {\r\n      message: \"Giriş başarılı.\",\r\n      data: {\r\n        user: userWithoutPassword,\r\n        token,\r\n      },\r\n    });\r\n    return;\r\n  } catch (err) {\r\n    logger.error(\"login hatası: %o\", err);\r\n    sendResponse(res, HttpStatusCode.INTERNAL_SERVER_ERROR, {\r\n      success: false,\r\n      message: \"Bir hata oluştu.\",\r\n    });\r\n    return;\r\n  }\r\n};\r\n"]}